---
- name: Start Paperless_ngx
  when: paperless_ngx_enabled
  block:
    - name: Check for Portainer Breaking Changes
      ansible.builtin.include_role:
        name: breaking_changes
      vars:
        breaking_changes_application: paperless_ngx

    - name: Create Paperless_ngx Directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
      with_items:
        - "{{ paperless_ngx_config_directory }}"
        - "{{ paperless_ngx_data_directory }}"
        - "{{ paperless_ngx_files_directory }}"
        - "{{ paperless_ngx_postgres_directory }}"
        - "{{ paperless_ngx_export_directory }}"
        - "{{ paperless_ngx_media_directory }}"
        - "{{ paperless_ngx_consume_directory }}"

    - name: Create Paperless_ngx network
      community.docker.docker_network:
        name: "{{ paperless_ngx_network_name }}"

    - name: Create Paperless_ngx redis broker
      community.docker.docker_container:
        name: "{{ paperless_ngx_redis_container_name }}"
        image: "{{ paperless_ngx_redis_image_name }}:{{ paperless_ngx_redis_image_version }}"
        container_default_behavior: compatibility
        pull: true
        restart_policy: unless-stopped
        memory: "{{ paperless_ngx_redis_memory }}"
        networks:
          - name: "{{ paperless_ngx_network_name }}"

    - name: Create Paperless_ngx postgres Docker Container
      community.docker.docker_container:
        name: "{{ paperless_ngx_postgres_container_name }}"
        image: "{{ paperless_ngx_postgres_image_name }}:{{ paperless_ngx_postgres_image_version }}"
        container_default_behavior: compatibility
        pull: true
        volumes:
          - "{{ paperless_ngx_postgres_directory }}:/var/lib/postgresql"
        env:
          POSTGRES_DB: "{{ paperless_ngx_postgres_db }}"
          POSTGRES_USER: "{{ paperless_ngx_postgres_user }}"
          POSTGRES_PASSWORD: "{{ paperless_ngx_postgres_password }}"
        restart_policy: unless-stopped
        memory: "{{ paperless_ngx_postgres_memory }}"
        networks:
          - name: "{{ paperless_ngx_network_name }}"

    - name: Create Paperless_ngx gotenberg Docker Container
      community.docker.docker_container:
        name: "{{ paperless_ngx_gotenberg_container_name }}"
        image: "{{ paperless_ngx_gotenberg_image_name }}:{{ paperless_ngx_gotenberg_image_version }}"
        restart_policy: unless-stopped
        container_default_behavior: compatibility
        # The gotenberg chromium route is used to convert .eml files. We do not
        # want to allow external content like tracking pixels or even javascript.
        command:
          - "gotenberg"
          - "--chromium-disable-javascript=true"
          - "--chromium-allow-list=file:///tmp/.*"
        memory: "{{ paperless_ngx_gotenberg_memory }}"
        networks:
          - name: "{{ paperless_ngx_network_name }}"

    - name: Create Paperless_ngx tika Docker Container
      community.docker.docker_container:
        name: "{{ paperless_ngx_tika_container_name }}"
        image: "{{ paperless_ngx_tika_image_name }}:{{ paperless_ngx_tika_image_version }}"
        restart_policy: unless-stopped
        container_default_behavior: compatibility
        memory: "{{ paperless_ngx_tika_memory }}"
        networks:
          - name: "{{ paperless_ngx_network_name }}"

    - name: Create Paperless_ngx UI Docker Container
      community.docker.docker_container:
        name: "{{ paperless_ngx_container_name }}"
        image: "{{ paperless_ngx_image_name }}:{{ paperless_ngx_image_version }}"
        pull: true
        container_default_behavior: compatibility
        healthcheck:
          test: ["CMD", "curl", "-fs", "-S", "--max-time", "2", "http://localhost:8000"]
          interval: 30s
          timeout: 10s
          retries: 5
        volumes:
          - "{{ paperless_ngx_data_directory }}:/usr/src/paperless/data"
          - "{{ paperless_ngx_media_directory }}:/usr/src/paperless/media"
          - "{{ paperless_ngx_export_directory }}:/usr/src/paperless/export"
          - "{{ paperless_ngx_consume_directory }}:/usr/src/paperless/consume"
        ports:
          - "{{ paperless_ngx_port }}:8000"
        env:
          PAPERLESS_REDIS: "redis://{{ paperless_ngx_redis_container_name | string }}:6379"
          PAPERLESS_DBHOST: "{{ paperless_ngx_postgres_container_name | string }}"
          USERMAP_UID: "{{ paperless_ngx_user_id }}"
          USERMAP_GID: "{{ paperless_ngx_group_id }}"
          PAPERLESS_TIKA_ENABLED: "1"
          PAPERLESS_TIKA_GOTENBERG_ENDPOINT: "http://{{ paperless_ngx_gotenberg_container_name }}:3000"
          PAPERLESS_TIKA_ENDPOINT: "http://{{ paperless_ngx_tika_container_name }}:9998"
          PAPERLESS_OCR_LANGUAGES: "{{ paperless_ngx_languages }}"
          # needed when exposing through traefik, or else CSRF will trigger
          PAPERLESS_URL: "https://{{ paperless_ngx_hostname }}.{{ dns_domain }}"
          PAPERLESS_SECRET_KEY: "{{ paperless_ngx_secret_key }}"
          # when set allows automatically creating admin user
          PAPERLESS_ADMIN_USER: "{{ paperless_ngx_admin_user }}"
          PAPERLESS_ADMIN_PASSWORD: "{{ paperless_ngx_admin_password }}"
          PAPERLESS_ADMIN_MAIL: "{{ paperless_ngx_admin_mail }}"
          PAPERLESS_CONSUMER_POLLING: "300"

        restart_policy: unless-stopped
        memory: "{{ paperless_ngx_memory }}"
        networks:
          - name: "{{ paperless_ngx_network_name }}"
        labels:
          traefik.enable: "{{ (paperless_ngx_dns_accessible or paperless_ngx_available_externally) | string }}"
          traefik.http.services.paperless_ngx.loadbalancer.server.port: "8000"
          traefik.http.routers.paperless_ngx.rule: "Host(`{{ paperless_ngx_hostname }}.{{ dns_domain }}`)"
          traefik.http.routers.paperless_ngx.tls.domains[0].main: "{{ dns_domain }}"
          traefik.http.routers.paperless_ngx.tls.domains[0].sans: "*.{{ dns_domain }}"
          traefik.http.routers.paperless_ngx.tls.certresolver: "letsencrypt"
          traefik.http.routers.paperless_ngx.middlewares: "{{ omit if paperless_ngx_available_externally else 'blockExternal@file' }}"

- name: Stop Paperless_ngx
  when: not paperless_ngx_enabled
  block:
    - name: Stop Paperless_ngx UI Docker Container
      community.docker.docker_container:
        name: "{{ paperless_ngx_container_name }}"
        state: absent
    - name: Stop Paperless_ngx tika Docker Container
      community.docker.docker_container:
        name: "{{ paperless_ngx_tika_container_name }}"
        state: absent
    - name: Stop paperless_ngx gotenberg Docker Container
      community.docker.docker_container:
        name: "{{ paperless_ngx_gotenberg_container_name }}"
        state: absent
    - name: Stop Paperless_ngx postgres Docker Container
      community.docker.docker_container:
        name: "{{ paperless_ngx_postgres_container_name }}"
        state: absent
    - name: Stop Paperless_ngx redis broker
      community.docker.docker_container:
        name: "{{ paperless_ngx_redis_container_name }}"
        state: absent
    - name: Remove Paperless_ngx network
      community.docker.docker_network:
        name: "{{ paperless_ngx_network_name }}"
        state: absent
