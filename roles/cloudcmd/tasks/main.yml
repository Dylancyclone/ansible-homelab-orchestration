---
- name: Start Cloudcmd
  when: cloudcmd_enabled
  block:
    - name: Check for Cloudcmd Breaking Changes
      ansible.builtin.include_role:
        name: breaking_changes
      vars:
        breaking_changes_application: cloudcmd

    - name: Create Cloudcmd Directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
      with_items:
        - "{{ cloudcmd_data_directory }}"
        - "{{ cloudcmd_browse_directory }}"

    - name: Cloudcmd Docker Container
      community.docker.docker_container:
        name: "{{ cloudcmd_container_name }}"
        image: "{{ cloudcmd_image_name }}:{{ cloudcmd_image_version }}"
        pull: true
        volumes:
          - "{{ cloudcmd_data_directory }}:/config:rw"
          - "{{ cloudcmd_browse_directory }}:/mnt/fs"
        ports:
          - "{{ cloudcmd_port }}:8000"
        env:
          TZ: "{{ computer_timezone }}"
          PUID: "{{ cloudcmd_user_id }}"
          PGID: "{{ cloudcmd_group_id }}"
        restart_policy: unless-stopped
        memory: "{{ cloudcmd_memory }}"
        labels:
          traefik.enable: "{{ (cloudcmd_dns_accessible or cloudcmd_available_externally) | string }}"
          traefik.http.services.cloudcmd.loadbalancer.server.port: "8000"
          traefik.http.routers.cloudcmd.rule: "Host(`{{ cloudcmd_hostname }}.{{ dns_domain }}`)"
          traefik.http.routers.cloudcmd.tls.domains[0].main: "{{ dns_domain }}"
          traefik.http.routers.cloudcmd.tls.domains[0].sans: "*.{{ dns_domain }}"
          traefik.http.routers.cloudcmd.tls.certresolver: "letsencrypt"
          traefik.http.routers.cloudcmd.middlewares: "{{ omit if cloudcmd_available_externally else 'blockExternal@file' }}"

- name: Stop Cloudcmd
  when: not cloudcmd_enabled
  block:
    - name: Stop Cloudcmd
      community.docker.docker_container:
        name: "{{ cloudcmd_container_name }}"
        state: absent
