---
- name: Start TTRSS
  when: ttrss_enabled
  block:
    - name: Check for TTRSS Breaking Changes
      ansible.builtin.include_role:
        name: breaking_changes
      vars:
        breaking_changes_application: ttrss

    - name: Create TTRSS Directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
      with_items:
        - "{{ ttrss_data_directory }}/data"
        - "{{ ttrss_app_data_directory }}"

    - name: Create ttrss network
      community.docker.docker_network:
        name: "{{ ttrss_network_name }}"

    - name: Create TTRSS db Docker Container
      community.docker.docker_container:
        name: "{{ ttrss_db_container_name }}"
        image: "{{ ttrss_db_image_name }}:{{ ttrss_db_image_version }}"
        pull: true
        volumes:
          - "{{ ttrss_data_directory }}/data:/var/lib/postgresql:rw"
        env:
          POSTGRES_DB: "{{ ttrss_postgres_db }}"
          POSTGRES_USER: "{{ ttrss_postgres_user }}"
          POSTGRES_PASSWORD: "{{ ttrss_postgres_password }}"
          TZ: "{{ computer_timezone }}"
        restart_policy: unless-stopped
        memory: "{{ ttrss_db_memory }}"
        networks:
          - name: "{{ ttrss_network_name }}"

    - name: Create TTRSS Docker Container
      community.docker.docker_container:
        name: "{{ ttrss_container_name }}"
        image: "{{ ttrss_image_name }}:{{ ttrss_image_version }}"
        restart_policy: unless-stopped
        env:
          TTRSS_DB_HOST: "{{ ttrss_db_container_name }}"
          TTRSS_DB_NAME: "{{ ttrss_postgres_db }}"
          TTRSS_DB_USER: "{{ ttrss_postgres_user }}"
          TTRSS_DB_PASS: "{{ ttrss_postgres_password }}"
          ADMIN_USER_PASS: "{{ ttrss_admin_password }}"
        memory: "{{ ttrss_memory }}"
        volumes:
          - "{{ ttrss_app_data_directory }}/app:/var/www/html"
          - "{{ ttrss_app_data_directory }}/config.d:/opt/tt-rss/config.d:ro"
        networks:
          - name: "{{ ttrss_network_name }}"

    - name: Create TTRSS Updater Docker Container
      community.docker.docker_container:
        name: "{{ ttrss_updater_container_name }}"
        image: "{{ ttrss_updater_image_name }}:{{ ttrss_updater_image_version }}"
        restart_policy: unless-stopped
        env:
          TTRSS_DB_HOST: "{{ ttrss_db_container_name }}"
          TTRSS_DB_NAME: "{{ ttrss_postgres_db }}"
          TTRSS_DB_USER: "{{ ttrss_postgres_user }}"
          TTRSS_DB_PASS: "{{ ttrss_postgres_password }}"
        memory: "{{ ttrss_memory }}"
        volumes:
          - "{{ ttrss_app_data_directory }}/app:/var/www/html"
          - "{{ ttrss_app_data_directory }}/config.d:/opt/tt-rss/config.d:ro"
        command: /opt/tt-rss/updater.sh
        networks:
          - name: "{{ ttrss_network_name }}"

    - name: Create TTRSS Nginx Docker Container
      community.docker.docker_container:
        name: "{{ ttrss_nginx_container_name }}"
        image: "{{ ttrss_nginx_image_name }}:{{ ttrss_nginx_image_version }}"
        ports:
          - "{{ ttrss_port }}:80"
        restart_policy: unless-stopped
        env:
          APP_UPSTREAM: "ttrss"
        volumes:
          - "{{ ttrss_app_data_directory }}/app:/var/www/html:ro"
        memory: "{{ ttrss_memory }}"
        networks:
          - name: "{{ ttrss_network_name }}"
        labels:
          traefik.enable: "{{ (ttrss_dns_accessible or ttrss_available_externally) | string }}"
          traefik.http.routers.ttrss.rule: "Host(`{{ ttrss_hostname }}.{{ dns_domain }}`)"
          traefik.http.services.ttrss.loadbalancer.server.port: "80"
          traefik.http.routers.ttrss.tls.domains[0].main: "{{ dns_domain }}"
          traefik.http.routers.ttrss.tls.domains[0].sans: "*.{{ dns_domain }}"
          traefik.http.routers.ttrss.tls.certresolver: "letsencrypt"
          traefik.http.routers.ttrss.middlewares: "{{ omit if ttrss_available_externally else 'blockExternal@file' }}"

- name: Stop TTRSS
  when: not ttrss_enabled
  block:
    - name: Stop TTRSS Nginx Docker Container
      community.docker.docker_container:
        name: "{{ ttrss_nginx_container_name }}"
        state: absent
    - name: Stop TTRSS Updater Docker Container
      community.docker.docker_container:
        name: "{{ ttrss_updater_container_name }}"
        state: absent
    - name: Stop TTRSS Docker Container
      community.docker.docker_container:
        name: "{{ ttrss_container_name }}"
        state: absent
    - name: Stop TTRSS DB Docker Container
      community.docker.docker_container:
        name: "{{ ttrss_db_container_name }}"
        state: absent
    - name: Remove paperless_ngx network
      community.docker.docker_network:
        name: "{{ ttrss_network_name }}"
        state: absent
