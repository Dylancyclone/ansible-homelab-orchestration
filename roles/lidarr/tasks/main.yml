---
- name: Start Lidarr
  when: lidarr_enabled
  block:
    - name: Check for Lidarr Breaking Changes
      ansible.builtin.include_role:
        name: breaking_changes
      vars:
        breaking_changes_application: lidarr

    - name: Create Lidarr Directory
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
      with_items:
        - "{{ lidarr_data_directory }}"
        - "{{ lidarr_music_directory }}"
        - "{{ lidarr_downloads_directory }}"

    - name: Lidarr Docker Container
      community.docker.docker_container:
        name: "{{ lidarr_container_name }}"
        image: "{{ lidarr_image_name }}:{{ lidarr_image_version }}"
        pull: true
        volumes:
          - "{{ lidarr_music_directory }}:/music:rw"
          - "{{ lidarr_downloads_directory }}:/downloads:rw"
          - "{{ lidarr_data_directory }}:/config:rw"
        ports:
          - "{{ lidarr_port }}:8686"
        env:
          TZ: "{{ computer_timezone }}"
          PUID: "{{ lidarr_user_id }}"
          PGID: "{{ lidarr_group_id }}"
        restart_policy: unless-stopped
        memory: "{{ lidarr_memory }}"
        labels:
          traefik.enable: "{{ (lidarr_dns_accessible or lidarr_available_externally) | string }}"
          traefik.http.services.lidarr.loadbalancer.server.port: "8686"
          traefik.http.routers.lidarr.rule: "Host(`{{ lidarr_hostname }}.{{ dns_domain }}`)"
          traefik.http.routers.lidarr.tls.domains[0].main: "{{ dns_domain }}"
          traefik.http.routers.lidarr.tls.domains[0].sans: "*.{{ dns_domain }}"
          traefik.http.routers.lidarr.tls.certresolver: "letsencrypt"
          traefik.http.routers.lidarr.middlewares: "{{ omit if lidarr_available_externally else 'blockExternal@file' }}"

- name: Stop Lidarr
  when: not lidarr_enabled
  block:
    - name: Stop Lidarr
      community.docker.docker_container:
        name: "{{ lidarr_container_name }}"
        state: absent
