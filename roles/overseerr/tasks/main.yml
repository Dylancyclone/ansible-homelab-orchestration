---
- name: Start Overseerr
  when: overseerr_enabled
  block:
    - name: Check for Overseerr Breaking Changes
      ansible.builtin.include_role:
        name: breaking_changes
      vars:
        breaking_changes_application: overseerr

    - name: Create Overseerr Directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
      with_items:
        - "{{ overseerr_data_directory }}"
        - "{{ overseerr_data_directory }}/config"

    - name: Overseerr Docker Container
      community.docker.docker_container:
        name: "{{ overseerr_container_name }}"
        image: "{{ overseerr_image_name }}:{{ overseerr_image_version }}"
        pull: true
        volumes:
          - "{{ overseerr_data_directory }}/config:/app/config:rw"
        ports:
          - "{{ overseerr_webui_port }}:5055"
        env:
          TZ: "{{ computer_timezone }}"
          PUID: "{{ overseerr_user_id }}"
          PGID: "{{ overseerr_group_id }}"
        restart_policy: unless-stopped
        memory: "{{ overseerr_memory }}"
        labels:
          traefik.enable: "{{ (overseerr_dns_accessible or overseerr_available_externally) | string }}"
          traefik.http.services.overseerr.loadbalancer.server.port: "5055"
          traefik.http.routers.overseerr.rule: "Host(`{{ overseerr_hostname }}.{{ dns_domain }}`)"
          traefik.http.routers.overseerr.tls.domains[0].main: "{{ dns_domain }}"
          traefik.http.routers.overseerr.tls.domains[0].sans: "*.{{ dns_domain }}"
          traefik.http.routers.overseerr.tls.certresolver: "letsencrypt"
          traefik.http.routers.overseerr.middlewares: "{{ omit if overseerr_available_externally else 'blockExternal@file' }}"

- name: Stop Overseerr
  when: not overseerr_enabled
  block:
    - name: Stop Overseerr
      community.docker.docker_container:
        name: "{{ overseerr_container_name }}"
        state: absent
