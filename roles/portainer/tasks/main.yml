---
- name: Start Portainer
  when: portainer_enabled
  block:
    - name: Create Portainer Directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
      with_items:
        - "{{ portainer_data_directory }}"

    - name: Portainer Docker Container
      community.docker.docker_container:
        name: "{{ portainer_container_name }}"
        image: "{{ portainer_image_name }}:{{ portainer_image_version }}"
        pull: true
        volumes:
          - "{{ portainer_data_directory }}:/data:rw"
          - "/var/run/docker.sock:/var/run/docker.sock:ro"
          - "/etc/timezone:/etc/timezone:ro"
        ports:
          - "{{ portainer_port }}:9000"
        restart_policy: unless-stopped
        memory: "{{ portainer_memory }}"
        labels:
          traefik.enable: "{{ (portainer_dns_accessible or portainer_available_externally) | string }}"
          traefik.http.services.portainer.loadbalancer.server.port: "9000"
          traefik.http.routers.portainer.rule: "Host(`{{ portainer_hostname }}.{{ dns_domain }}`)"
          traefik.http.routers.portainer.tls.domains[0].main: "{{ dns_domain }}"
          traefik.http.routers.portainer.tls.domains[0].sans: "*.{{ dns_domain }}"
          traefik.http.routers.portainer.tls.certresolver: "letsencrypt"
          traefik.http.routers.portainer.middlewares: "{{ omit if portainer_available_externally else 'blockExternal@file' }}"

- name: Stop Portainer
  when: not portainer_enabled
  block:
    - name: Stop Portainer
      community.docker.docker_container:
        name: "{{ portainer_container_name }}"
        state: absent
