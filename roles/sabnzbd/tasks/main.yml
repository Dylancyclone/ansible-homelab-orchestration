---
- name: Start Sabnzbd
  when: sabnzbd_enabled
  block:
    - name: Check for Sabnzbd Breaking Changes
      ansible.builtin.include_role:
        name: breaking_changes
      vars:
        breaking_changes_application: sabnzbd

    - name: Create Sabnzbd Data Directory
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
      with_items:
        - "{{ sabnzbd_data_directory }}"
        - "{{ sabnzbd_downloads_directory }}"
        - "{{ sabnzbd_incomplete_directory }}"

    - name: Sabnzbd
      community.docker.docker_container:
        name: "{{ sabnzbd_container_name }}"
        image: "{{ sabnzbd_image_name }}:{{ sabnzbd_image_version }}"
        pull: true
        volumes:
          - "{{ sabnzbd_data_directory }}:/config:rw"
          - "{{ sabnzbd_downloads_directory }}:/downloads"
          - "{{ sabnzbd_incomplete_directory }}:/incomplete-downloads"
        ports:
          - "{{ sabnzbd_port }}:8080"
        env:
          TZ: "{{ computer_timezone }}"
          PUID: "{{ sabnzbd_user_id }}"
          PGID: "{{ sabnzbd_group_id }}"
        restart_policy: unless-stopped
        memory: "{{ sabnzbd_memory }}"
        labels:
          traefik.enable: "{{ (sabnzbd_dns_accessible or sabnzbd_available_externally) | string }}"
          traefik.http.services.sabnzbd.loadbalancer.server.port: "8080"
          traefik.http.routers.sabnzbd.rule: "Host(`{{ sabnzbd_hostname }}.{{ dns_domain }}`)"
          traefik.http.routers.sabnzbd.tls.domains[0].main: "{{ dns_domain }}"
          traefik.http.routers.sabnzbd.tls.domains[0].sans: "*.{{ dns_domain }}"
          traefik.http.routers.sabnzbd.tls.certresolver: "letsencrypt"
          traefik.http.routers.sabnzbd.middlewares: "{{ omit if sabnzbd_available_externally else 'blockExternal@file' }}"

- name: Stop Sabnzbd
  when: not sabnzbd_enabled
  block:
    - name: Stop Sabnzbd
      community.docker.docker_container:
        name: "{{ sabnzbd_container_name }}"
        state: absent
