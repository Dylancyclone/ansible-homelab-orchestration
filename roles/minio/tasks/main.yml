---
- name: Start Minio
  when: minio_enabled
  block:
    - name: Check for Minio Breaking Changes
      ansible.builtin.include_role:
        name: breaking_changes
      vars:
        breaking_changes_application: minio

    - name: Create Minio Directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
      with_items:
        - "{{ minio_data_directory }}/data"

    - name: Minio Docker Container
      community.docker.docker_container:
        name: "{{ minio_container_name }}"
        image: "{{ minio_image_name }}:{{ minio_image_version }}"
        pull: true
        ports:
          - "{{ minio_api_port }}:9000"
          - "{{ minio_console_port }}:{{ minio_console_port }}"
        command: 'server /data --console-address ":{{ minio_console_port }}"'
        volumes:
          - "{{ minio_data_directory }}/data:/data"
        env:
          MINIO_ROOT_USER: "{{ minio_admin_username }}"
          MINIO_ROOT_PASSWORD: "{{ minio_admin_password }}"
          MINIO_PROMETHEUS_AUTH_TYPE: public
        restart_policy: unless-stopped
        memory: "{{ minio_memory }}"
        labels:
          traefik.enable: "{{ (minio_dns_accessible or minio_available_externally) | string }}"
          traefik.http.services.minio.loadbalancer.server.port: "9000"
          traefik.http.routers.minio.rule: "Host(`{{ minio_hostname }}.{{ dns_domain }}`)"
          traefik.http.routers.minio.tls.domains[0].main: "{{ dns_domain }}"
          traefik.http.routers.minio.tls.domains[0].sans: "*.{{ dns_domain }}"
          traefik.http.routers.minio.tls.certresolver: "letsencrypt"
          traefik.http.routers.minio.middlewares: "{{ omit if minio_available_externally else 'blockExternal@file' }}"

- name: Stop minio
  when: not minio_enabled
  block:
    - name: Stop minio
      community.docker.docker_container:
        name: "{{ minio_container_name }}"
        state: absent
