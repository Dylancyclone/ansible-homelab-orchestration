---
- name: Start Immich
  when: immich_enabled
  block:
    - name: Check for Immich Breaking Changes
      ansible.builtin.include_role:
        name: breaking_changes
      vars:
        breaking_changes_application: immich

    - name: Create Immich Directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
      with_items:
        - "{{ immich_config_directory }}"
        - "{{ immich_postgres_directory }}"
        - "{{ immich_upload_directory }}"
        - "{{ immich_model_cache_directory }}"

    - name: Create Immich network
      community.docker.docker_network:
        name: "{{ immich_network_name }}"

    - name: Create Immich redis broker
      community.docker.docker_container:
        name: "{{ immich_redis_container_name }}"
        image: "{{ immich_redis_image_name }}:{{ immich_redis_image_version }}"
        pull: true
        healthcheck:
          test: redis-cli ping || exit 1
        restart_policy: unless-stopped
        memory: "{{ immich_redis_memory }}"
        networks:
          - name: "{{ immich_network_name }}"

    - name: Create Immich postgres Docker Container
      community.docker.docker_container:
        name: "{{ immich_postgres_container_name }}"
        image: "{{ immich_postgres_image_name }}:{{ immich_postgres_image_version }}"
        pull: true
        volumes:
          - "{{ immich_postgres_directory }}:/var/lib/postgresql/data"
        env:
          POSTGRES_DB: "{{ immich_postgres_db }}"
          POSTGRES_USER: "{{ immich_postgres_user }}"
          POSTGRES_PASSWORD: "{{ immich_postgres_password }}"
          POSTGRES_INITDB_ARGS: '--data-checksums'
          # Uncomment the DB_STORAGE_TYPE: 'HDD' var if your database isn't stored on SSDs
          # DB_STORAGE_TYPE: 'HDD'
        restart_policy: unless-stopped
        memory: "{{ immich_postgres_memory }}"
        networks:
          - name: "{{ immich_network_name }}"

    - name: Create Immich Machine Learning Docker Container
      community.docker.docker_container:
        name: "{{ immich_machine_learning_container_name }}"
        image: "{{ immich_machine_learning_image_name }}:{{ immich_image_version }}{{ immich_hardware_acceleration }}"
        volumes:
          - "{{ immich_model_cache_directory }}:/cache"
        restart_policy: unless-stopped
        memory: "{{ immich_machine_learning_memory }}"
        networks:
          - name: "{{ immich_network_name }}"

    - name: Create Immich UI Docker Container
      community.docker.docker_container:
        name: "{{ immich_container_name }}"
        image: "{{ immich_image_name }}:{{ immich_image_version }}"
        pull: true
        volumes:
          - "{{ immich_upload_directory }}:/usr/src/app/upload"
          - "/etc/localtime:/etc/localtime:ro"
        ports:
          - "{{ immich_port }}:2283"
        env:
          DB_HOSTNAME: "immich_postgres"
          DB_DATABASE_NAME: "{{ immich_postgres_db }}"
          DB_USERNAME: "{{ immich_postgres_user }}"
          DB_PASSWORD: "{{ immich_postgres_password }}"
          REDIS_HOSTNAME: "immich_redis"
          IMMICH_MACHINE_LEARNING_URL: "http://immich_machine_learning:3003"
          TZ: "{{ computer_timezone }}"
        restart_policy: unless-stopped
        memory: "{{ immich_memory }}"
        networks:
          - name: "{{ immich_network_name }}"
        labels:
          traefik.enable: "{{ (immich_dns_accessible or immich_available_externally) | string }}"
          traefik.http.services.immich.loadbalancer.server.port: "2283"
          traefik.http.routers.immich.rule: "Host(`{{ immich_hostname }}.{{ dns_domain }}`)"
          traefik.http.routers.immich.tls.domains[0].main: "{{ dns_domain }}"
          traefik.http.routers.immich.tls.domains[0].sans: "*.{{ dns_domain }}"
          traefik.http.routers.immich.tls.certresolver: "letsencrypt"
          traefik.http.routers.immich.middlewares: "{{ omit if immich_available_externally else 'blockExternal@file' }}"

- name: Stop Immich
  when: not immich_enabled
  block:
    - name: Stop Immich UI Docker Container
      community.docker.docker_container:
        name: "{{ immich_container_name }}"
        state: absent
    - name: Stop Immich Machine Learning Docker Container
      community.docker.docker_container:
        name: "{{ immich_machine_learning_container_name }}"
        state: absent
    - name: Stop Immich postgres Docker Container
      community.docker.docker_container:
        name: "{{ immich_postgres_container_name }}"
        state: absent
    - name: Stop Immich redis broker
      community.docker.docker_container:
        name: "{{ immich_redis_container_name }}"
        state: absent
    - name: Remove Immich network
      community.docker.docker_network:
        name: "{{ immich_network_name }}"
        state: absent
